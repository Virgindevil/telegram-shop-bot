# -*- coding: utf-8 -*-
import sqlite3
import os


from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

ADMIN_ID = "753866988"

def get_subcategories(parent_id=None):
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, name FROM categories WHERE parent_id IS ?', (parent_id,))
    rows = cursor.fetchall()
    conn.close()
    return {str(row[0]): row[1] for row in rows}

def has_products(category_id):
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM products WHERE category_id = ?', (category_id,))
    count = cursor.fetchone()[0]
    conn.close()
    return count > 0

def get_products_by_category(category_id):
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, name, price, stock, image_url FROM products WHERE category_id = ?', (category_id,))
    rows = cursor.fetchall()
    conn.close()
    return {
        str(row[0]): {"name": row[1], "price": row[2], "stock": row[3], "image_url": row[4]}
        for row in rows
    }

def get_category_name(category_id):
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT name FROM categories WHERE id = ?', (category_id,))
    row = cursor.fetchone()
    conn.close()
    return row[0] if row else "–ö–∞—Ç–∞–ª–æ–≥"

# ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–û–•–†–ê–ù–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê
def save_order(user_id, username, items, address, total_price, payment_method, payment_proof, payment_proof_type):
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO orders (user_id, username, items, address, total_price, payment_method, payment_proof, payment_proof_type)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, username, items, address, total_price, payment_method, payment_proof, payment_proof_type))
    conn.commit()
    conn.close()

# ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–°–¢–ê–¢–ö–û–í –¢–û–í–ê–†–ê
def update_stock(product_id, quantity_sold):
    """
    –£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    """
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    try:
        cursor.execute('UPDATE products SET stock = stock - ? WHERE id = ?', (quantity_sold, product_id))
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
    finally:
        conn.close()


# --- –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data[user_id]["last_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
    if user_id not in context.user_data:
        context.user_data[user_id] = {"cart": {}, "reserved_stock": {}, "category_path": []}
    username = update.message.from_user.username
    context.user_data[user_id]["username"] = username if username else f"user_{user_id}"
    keyboard = [
        [InlineKeyboardButton("üñºÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="view_products")],
        [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")],
        [InlineKeyboardButton("üì¶ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="check_order")],
        [InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ö—É–¥–æ–∂–Ω–∏–∫—É", callback_data="contact_admin")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=reply_markup)
    context.user_data[user_id]["last_message_id"] = message.message_id

async def view_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=context.user_data[user_id]["last_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
    if "product_messages" in context.user_data.get(user_id, {}):
        for msg_id in context.user_data[user_id]["product_messages"]:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
        context.user_data[user_id]["product_messages"].clear()
    if "category_path" in context.user_data:
        context.user_data["category_path"][user_id] = []
    subcategories = get_subcategories(parent_id=None)
    if not subcategories:
        message = await query.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return
    keyboard = []
    for cat_id, name in subcategories.items():
        keyboard.append([InlineKeyboardButton(name, callback_data=f"category_{cat_id}")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
    context.user_data[user_id]["last_message_id"] = message.message_id

async def show_category_or_products(update: Update, context: ContextTypes.DEFAULT_TYPE, category_id=None):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=context.user_data[user_id]["last_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    if "product_messages" in context.user_data.get(user_id, {}):
        for msg_id in context.user_data[user_id]["product_messages"]:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
        context.user_data[user_id]["product_messages"].clear()

    # –†–∞–±–æ—Ç–∞–µ–º —Å category_id
    if category_id is None and query.data.startswith("category_"):
        category_id = int(query.data.split("_")[1])

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å
    if "category_path" not in context.user_data:
        context.user_data["category_path"] = {}
    current_path = context.user_data["category_path"].get(user_id, [])
    if category_id is not None:
        if not current_path or current_path[-1] != category_id:
            current_path = current_path[:current_path.index(category_id)+1] if category_id in current_path else current_path + [category_id]
            context.user_data["category_path"][user_id] = current_path

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    subcategories = get_subcategories(category_id)
    keyboard = []

    for cat_id, name in subcategories.items():
        keyboard.append([InlineKeyboardButton(name, callback_data=f"category_{cat_id}")])

    if category_id is not None and has_products(category_id):
        products = get_products_by_category(category_id)
        for product_id in products:
            product = products[product_id]
            keyboard.append([InlineKeyboardButton(f"üñºÔ∏è {product['name']}", callback_data=f"show_product_{product_id}")])

    # –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥"
    if len(current_path) > 1:
        parent_id = current_path[-2]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"category_{parent_id}")])
    else:
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    category_name = get_category_name(category_id) if category_id is not None else "–ö–∞—Ç–∞–ª–æ–≥"
    message = await query.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}", reply_markup=reply_markup)
    context.user_data[user_id]["last_message_id"] = message.message_id

async def show_product_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=context.user_data[user_id]["last_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
    if "product_messages" in context.user_data.get(user_id, {}):
        for msg_id in context.user_data[user_id]["product_messages"]:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
        context.user_data[user_id]["product_messages"].clear()
    product_id = int(query.data.split("_")[2])
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT name, price, stock, image_url FROM products WHERE id = ?', (product_id,))
    row = cursor.fetchone()
    conn.close()
    if not row:
        message = await query.message.reply_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return
    name, price, stock, image_path = row
    if os.path.exists(image_path):
        try:
            with open(image_path, 'rb') as photo:
                sent_message = await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=photo,
                    caption=f"{name}\n–¶–µ–Ω–∞: {price} —Ä—É–±.\n–í –Ω–∞–ª–∏—á–∏–∏: {stock} —à—Ç."
                )
                context.user_data[user_id]["product_messages"] = [sent_message.message_id]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            message = await query.message.reply_text(f"{name}\n–¶–µ–Ω–∞: {price} —Ä—É–±.\n–í –Ω–∞–ª–∏—á–∏–∏: {stock} —à—Ç.")
            context.user_data[user_id]["last_message_id"] = message.message_id
            return
    else:
        message = await query.message.reply_text(f"{name}\n–¶–µ–Ω–∞: {price} —Ä—É–±.\n–í –Ω–∞–ª–∏—á–∏–∏: {stock} —à—Ç.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return
    keyboard = [
        [InlineKeyboardButton("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_category")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    context.user_data[user_id]["last_message_id"] = message.message_id
    context.user_data[user_id]["product_messages"] = [sent_message.message_id]

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª—ë–Ω –¥—É–±–ª–∏–∫–∞—Ç, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ë–î
async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if user_id not in context.user_data:
        context.user_data[user_id] = {"cart": {}, "reserved_stock": {}, "category_path": []}
    user_id = query.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞)
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=context.user_data[user_id]["last_message_id"]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    product_id = int(query.data.split("_")[3])

    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, name, price, stock FROM products WHERE id = ?', (product_id,))
    row = cursor.fetchone()
    conn.close()

    if not row:
        await query.message.reply_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    _, name, price, stock = row

    reserved = context.user_data[user_id].get("reserved_stock", {}).get(str(product_id), 0)
    available = stock - reserved
    if available <= 0:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="view_products")],
            [InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")]
        ])
        message = await query.message.reply_text(f"–¢–æ–≤–∞—Ä {name} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.", reply_markup=keyboard)
        context.user_data[user_id]["last_message_id"] = message.message_id
        return

    cart = context.user_data[user_id].setdefault("cart", {})
    if str(product_id) in cart:
        cart[str(product_id)]["quantity"] += 1
    else:
        cart[str(product_id)] = {"name": name, "price": price, "quantity": 1}

    context.user_data[user_id]["reserved_stock"][str(product_id)] = reserved + 1

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="view_products")],
        [InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")]
    ])
    message = await query.message.reply_text(f"'{name}' –¥–æ–±–∞–≤–ª–µ–Ω. –ö–æ–ª-–≤–æ: {cart[str(product_id)]['quantity']}", reply_markup=keyboard)
    context.user_data[user_id]["last_message_id"] = message.message_id

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å query.data ‚Äî —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–ø—Ä—è–º—É—é
async def back_to_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    path = context.user_data.get("category_path", {}).get(user_id, [])

    if len(path) > 1:
        new_path = path[:-1]
        context.user_data.setdefault("category_path", {})[user_id] = new_path
        last_cat_id = new_path[-1]
        # –ü–µ—Ä–µ–¥–∞—ë–º ID –Ω–∞–ø—Ä—è–º—É—é
        await show_category_or_products(update, context, category_id=last_cat_id)
    elif len(path) == 1:
        context.user_data["category_path"][user_id] = []
        await view_products(update, context)
    else:
        await view_products(update, context)
        
async def contact_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    username = query.from_user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id})"
    
    if user_id not in context.user_data:
        context.user_data[user_id] = {}
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=context.user_data[user_id]["last_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

    if "product_messages" in context.user_data.get(user_id, {}):
        for msg_id in context.user_data[user_id]["product_messages"]:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
        context.user_data[user_id]["product_messages"].clear()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data[user_id]["state"] = "awaiting_admin_message"
    
    message = await query.message.reply_text(
        "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ö—É–¥–æ–∂–Ω–∏–∫—É. –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É—é."
    )
    context.user_data[user_id]["last_message_id"] = message.message_id
     
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=context.user_data[user_id]["last_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
    if "product_messages" in context.user_data.get(user_id, {}):
        for msg_id in context.user_data[user_id]["product_messages"]:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
        context.user_data[user_id]["product_messages"].clear()
    if "category_path" in context.user_data:
        context.user_data["category_path"].pop(user_id, None)
    keyboard = [
        [InlineKeyboardButton("üñºÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="view_products")],
        [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")],
        [InlineKeyboardButton("üì¶ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="check_order")],
        [InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ö—É–¥–æ–∂–Ω–∏–∫—É", callback_data="contact_admin")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await query.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=reply_markup)
    context.user_data[user_id]["last_message_id"] = message.message_id


# ‚úÖ –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def view_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=context.user_data[user_id]["last_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤
    if "product_messages" in context.user_data.get(user_id, {}):
        for msg_id in context.user_data[user_id]["product_messages"]:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
        context.user_data[user_id]["product_messages"].clear()
            
    if user_id not in context.user_data or "cart" not in context.user_data[user_id]:
        context.user_data[user_id] = {"cart": {}}
    cart = context.user_data[user_id]["cart"]
    if not cart:
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=keyboard)
        context.user_data[user_id]["last_message_id"] = message.message_id
        return
    total_price = sum(item["price"] * item["quantity"] for item in cart.values())
    delivery_cost = 0 if total_price >= 1500 else 400
    final_price = total_price + delivery_cost
    cart_text = "\n".join([
        f"{item['name']} - {item['price']} —Ä—É–±. x {item['quantity']} = {item['price'] * item['quantity']} —Ä—É–±."
        for item in cart.values()
    ])
    keyboard = [
        [InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="remove_from_cart")],
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="view_products")]
    ]
    if len(cart) > 1:
        keyboard.insert(2, [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –í–°–ï —Ç–æ–≤–∞—Ä—ã", callback_data="clear_cart")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await query.message.reply_text(
        text=f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{cart_text}\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.\n"
             f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_cost} —Ä—É–±. (–û—Ç 1500—Ä. –≤ —á–µ–∫–µ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n–ò—Ç–æ–≥–æ: {final_price} —Ä—É–±.",
        reply_markup=reply_markup
    )
    context.user_data[user_id]["last_message_id"] = message.message_id

async def remove_from_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=context.user_data[user_id]["last_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    if user_id not in context.user_data or "cart" not in context.user_data[user_id]:
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return
    cart = context.user_data[user_id]["cart"]
    keyboard = [
        [InlineKeyboardButton(f"{item['name']} (x{item['quantity']})", callback_data=f"remove_item_{product_id}")]
        for product_id, item in cart.items()
    ]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="view_cart")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    context.user_data[user_id]["last_message_id"] = message.message_id

async def remove_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    product_id = query.data.split("_")[2]
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=context.user_data[user_id]["last_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    if user_id not in context.user_data or "cart" not in context.user_data[user_id]:
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return
    cart = context.user_data[user_id]["cart"]
    if product_id not in cart:
        message = await query.message.reply_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return
    if cart[product_id]["quantity"] > 1:
        cart[product_id]["quantity"] -= 1
        text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {cart[product_id]['name']} —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ {cart[product_id]['quantity']}."
    else:
        removed_item = cart.pop(product_id)
        text = f"{removed_item['name']} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."
    if not cart:
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞.", reply_markup=keyboard)
        context.user_data[user_id]["last_message_id"] = message.message_id
        return
    total_price = sum(item["price"] * item["quantity"] for item in cart.values())
    delivery_cost = 0 if total_price >= 1500 else 400
    final_price = total_price + delivery_cost
    cart_text = "\n".join([
        f"{item['name']} - {item['price']} —Ä—É–±. x {item['quantity']} = {item['price'] * item['quantity']} —Ä—É–±."
        for item in cart.values()
    ])
    keyboard = [
        [InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="remove_from_cart")],
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="view_products")]
    ]
    if len(cart) > 1:
        keyboard.insert(2, [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –í–°–ï —Ç–æ–≤–∞—Ä—ã", callback_data="clear_cart")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await query.message.reply_text(
        text=f"{text}\n–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{cart_text}\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.\n"
             f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_cost} —Ä—É–±. (–û—Ç 1500—Ä. –≤ —á–µ–∫–µ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n–ò—Ç–æ–≥–æ: {final_price} —Ä—É–±.",
        reply_markup=reply_markup
    )
    context.user_data[user_id]["last_message_id"] = message.message_id

async def clear_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=context.user_data[user_id]["last_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    if user_id not in context.user_data or "cart" not in context.user_data[user_id]:
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return
    context.user_data[user_id]["cart"] = {}
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
    message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞.", reply_markup=keyboard)
    context.user_data[user_id]["last_message_id"] = message.message_id

async def checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=context.user_data[user_id]["last_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    if user_id not in context.user_data or "cart" not in context.user_data[user_id]:
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return
    cart = context.user_data[user_id]["cart"]
    if not cart:
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return
    total_price = sum(item["price"] * item["quantity"] for item in cart.values())
    delivery_cost = 0 if total_price >= 1500 else 400
    final_price = total_price + delivery_cost
    cart_text = "\n".join([
        f"{item['name']} - {item['price']} —Ä—É–±. x {item['quantity']} = {item['price'] * item['quantity']} —Ä—É–±."
        for item in cart.values()
    ])
    message = await query.message.reply_text(
        text=f"–í–∞—à –∑–∞–∫–∞–∑:\n{cart_text}\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.\n"
             f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_cost} —Ä—É–±.(–û—Ç 1500—Ä. –≤ —á–µ–∫–µ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n–ò—Ç–æ–≥–æ: {final_price} —Ä—É–±.\n\n"
             f"*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –∏–Ω–¥–µ–∫—Å, –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:*"
    )
    context.user_data[user_id]["last_message_id"] = message.message_id
    context.user_data[user_id]["state"] = "awaiting_address"

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in context.user_data:
        context.user_data[user_id] = {}

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    if "last_message_id" in context.user_data[user_id]:
        try:
            await context.bot.delete_message(
                chat_id=update.message.chat_id,
                message_id=context.user_data[user_id]["last_message_id"]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

    state = context.user_data[user_id].get("state")

    # === –°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ ===
    if state == "awaiting_address":
        return await handle_address_logic(update, context)

    # === –°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫—É ===
    elif state == "awaiting_admin_message":
        return await handle_admin_message_logic(update, context)

    # === –ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –æ—à–∏–±–∫–∞ –∏–ª–∏ "–º—É—Å–æ—Ä" ===
    else:
        # –ú–æ–∂–Ω–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
        pass

async def handle_address_logic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    address = update.message.text
    context.user_data[user_id]["address"] = address

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
    message = await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–°–ë–ü (QR-–∫–æ–¥)", callback_data="payment_qr")],
            [InlineKeyboardButton("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", callback_data="payment_card")]
        ])
    )
    context.user_data[user_id]["last_message_id"] = message.message_id

async def handle_admin_message_logic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    username = update.message.from_user.username or f"user_{user_id}"
    text = update.message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    admin_message = (
        f"üì¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"@{username} (ID: {user_id})\n"
        f"–¢–µ–∫—Å—Ç:\n{text}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    reply = await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö—É–¥–æ–∂–Ω–∏–∫—É.")
    context.user_data[user_id]["last_message_id"] = reply.message_id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data[user_id]["state"] = None
   
async def handle_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=context.user_data[user_id]["last_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    if user_id not in context.user_data or "cart" not in context.user_data[user_id]:
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return
    payment_method = query.data.split("_")[1]
    context.user_data[user_id]["payment_method"] = payment_method
    if payment_method == "qr":
        with open("QR-Code.jpg", "rb") as photo_file:
            photo_msg = await query.message.reply_photo(photo=photo_file, caption="–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ
            context.user_data[user_id]["payment_messages"] = [photo_msg.message_id]
    else:
        await query.message.reply_text("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: 2202 2016 3095 5124")
    text_msg = await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ PDF-—Ñ–∞–π–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")
    context.user_data[user_id]["state"] = "awaiting_payment_proof"
    context.user_data[user_id]["payment_messages"].append(text_msg.message_id)
    context.user_data[user_id]["last_message_id"] = query.message.message_id

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–∑–æ–≤ update_stock() –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def handle_payment_proof(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    payment_proof = update.message.document or update.message.photo
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –ø–æ –æ–ø–ª–∞—Ç–µ
    if "payment_messages" in context.user_data.get(user_id, {}):
        for msg_id in context.user_data[user_id]["payment_messages"]:
            try:
                await context.bot.delete_message(chat_id=update.message.chat_id, message_id=msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        del context.user_data[user_id]["payment_messages"]

    
    if user_id not in context.user_data or context.user_data[user_id].get("state") != "awaiting_payment_proof":
        return

    if update.message.photo:
        payment_proof = update.message.photo[-1].file_id
        payment_proof_type = 'photo'
    elif update.message.document and (update.message.document.mime_type.startswith('image/') or update.message.document.mime_type == "application/pdf"):
        payment_proof = update.message.document.file_id
        payment_proof_type = 'document'
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã.")
        return

    cart = context.user_data[user_id]["cart"]
    product_ids = list(cart.keys())
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    placeholders = ", ".join("?" * len(product_ids))
    cursor.execute(f'''
        SELECT p.id, p.name, c.name 
        FROM products p
        JOIN categories c ON p.category_id = c.id
        WHERE p.id IN ({placeholders})
    ''', product_ids)
    product_info = cursor.fetchall()
    conn.close()

    formatted_items = []
    for pid, product_name, category_name in product_info:
        item = cart.get(str(pid))
        if item:
            quantity = item["quantity"]
            formatted_items.append(f"{product_name} x{quantity} ({category_name})")
    items = ", ".join(formatted_items)

    total_price = sum(item["price"] * item["quantity"] for item in cart.values())
    delivery_cost = 0 if total_price >= 1500 else 400
    final_price = total_price + delivery_cost
    payment_method = context.user_data[user_id]["payment_method"]

    # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –ó–ê–ö–ê–ó
    save_order(
        user_id=user_id,
        username=context.user_data[user_id].get('username', f"user_{user_id}"),
        items=items,
        address=context.user_data[user_id]["address"],
        total_price=final_price,
        payment_method=payment_method,
        payment_proof=payment_proof,
        payment_proof_type=payment_proof_type
    )

    # ‚úÖ –°–ü–ò–°–´–í–ê–ï–ú –¢–û–í–ê–†–´ –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ì–û –°–û–•–†–ê–ù–ï–ù–ò–Ø
    for product_id, item in cart.items():
        update_stock(product_id, item["quantity"])
        
    username = context.user_data[user_id]['username']
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_message = (f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {context.user_data[user_id]['username']}:\n"
                     f"–¢–æ–≤–∞—Ä—ã: {items}\n"
                     f"–ê–¥—Ä–µ—Å: {context.user_data[user_id]['address']}\n"
                     f"–°—É–º–º–∞: {final_price} —Ä—É–±.\n"
                     f"–û–ø–ª–∞—Ç–∞: {payment_method.capitalize()}")
    await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)
    if payment_proof_type == 'photo':
        await context.bot.send_photo(chat_id=ADMIN_ID, photo=payment_proof)
    else:
        await context.bot.send_document(chat_id=ADMIN_ID, document=payment_proof)

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del context.user_data[user_id]
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")

async def check_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data[user_id]["last_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT items, address, total_price, payment_method FROM orders WHERE user_id = ? ORDER BY id DESC', (user_id,))
    orders = cursor.fetchall()
    conn.close()
    if not orders:
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        message = await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=keyboard)
        context.user_data[user_id]["last_message_id"] = message.message_id
        return
    orders_text = []
    for idx, order in enumerate(orders, start=1):
        items, address, total_price, payment_method = order
        orders_text.append(f"–ó–∞–∫–∞–∑ #{idx}:\n–¢–æ–≤–∞—Ä—ã: {items}\n–ê–¥—Ä–µ—Å: {address}\n–°—É–º–º–∞: {total_price} —Ä—É–±.\n–û–ø–ª–∞—Ç–∞: {payment_method.capitalize()}\n-----------------------------")
    full_orders_text = "\n".join(orders_text)
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
    message = await query.message.reply_text(f"–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:\n{full_orders_text}", reply_markup=keyboard)
    context.user_data[user_id]["last_message_id"] = message.message_id

# --- –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ---
async def update_stock_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if str(user_id) != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /update_stock <product_id> <new_stock>")
        return
    try:
        product_id = int(args[0])
        new_stock = int(args[1])
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
        return
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT name FROM products WHERE id = ?', (product_id,))
    product = cursor.fetchone()
    if not product:
        await update.message.reply_text(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        conn.close()
        return
    cursor.execute('UPDATE products SET stock = ? WHERE id = ?', (new_stock, product_id))
    conn.commit()
    conn.close()
    await update.message.reply_text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ '{product[0]}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {new_stock}.")

async def view_all_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        user_id = update.message.from_user.id
        chat = update.message
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
        chat = update.callback_query.message
    else:
        return
    if str(user_id) != ADMIN_ID:
        await chat.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    page = context.user_data.get("view_all_orders_page", 1)
    PAGE_SIZE = 5
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, user_id, username, items, address, total_price, payment_method, payment_proof, payment_proof_type FROM orders ORDER BY id DESC')
    orders = cursor.fetchall()
    conn.close()
    if not orders:
        await chat.reply_text("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    total_pages = (len(orders) + PAGE_SIZE - 1) // PAGE_SIZE
    start_index = (page - 1) * PAGE_SIZE
    current_page_orders = orders[start_index:start_index + PAGE_SIZE]
    orders_text = ""
    for order in current_page_orders:
        order_id, uid, uname, items, addr, price, pmethod, proof, ptype = order
        orders_text += f"üì¶ –ó–∞–∫–∞–∑ #{order_id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{uname} (ID: {uid})\n–¢–æ–≤–∞—Ä—ã: {items}\n–ê–¥—Ä–µ—Å: {addr}\n–°—É–º–º–∞: {price} —Ä—É–±.\n–û–ø–ª–∞—Ç–∞: {pmethod.capitalize()}\n-------------------------------\n"
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(chat_id=chat.chat_id, message_id=context.user_data[user_id]["last_message_id"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    if "sent_files" in context.user_data.get(user_id, {}):
        for _, msg_id in context.user_data[user_id]["sent_files"]:
            try:
                await context.bot.delete_message(chat_id=chat.chat_id, message_id=msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        context.user_data[user_id]["sent_files"] = []
    sent_files = []
    for order in current_page_orders:
        _, _, _, _, _, _, _, proof, ptype = order
        if proof:
            try:
                if ptype == 'photo':
                    msg = await context.bot.send_photo(chat_id=chat.chat_id, photo=proof)
                    sent_files.append(("photo", msg.message_id))
                elif ptype == 'document':
                    msg = await context.bot.send_document(chat_id=chat.chat_id, document=proof)
                    sent_files.append(("document", msg.message_id))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    context.user_data[user_id]["sent_files"] = sent_files
    keyboard = []
    if page > 1:
        keyboard.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data="prev_orders_page"))
    if start_index + PAGE_SIZE < len(orders):
        keyboard.append(InlineKeyboardButton("–°–ª–µ–¥. ‚û°Ô∏è", callback_data="next_orders_page"))
    nav_row = []
    if keyboard:
        nav_row.extend(keyboard)
    nav_row.append(InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_orders"))
    reply_markup = InlineKeyboardMarkup([nav_row])
    try:
        message = await chat.reply_text(f"üõí –ó–∞–∫–∞–∑—ã (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):\n{orders_text}", reply_markup=reply_markup)
        context.user_data["last_message_id"] = message.message_id
        context.user_data["view_all_orders_page"] = page
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

async def navigate_orders_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if str(query.from_user.id) != ADMIN_ID:
        await query.edit_message_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    page = context.user_data.get("view_all_orders_page", 1)
    context.user_data["view_all_orders_page"] = page + 1 if query.data == "next_orders_page" else max(1, page - 1)
    await view_all_orders(update, context)

async def close_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if str(query.from_user.id) != ADMIN_ID:
        await query.edit_message_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    chat_id = query.message.chat_id
    if "last_message_id" in context.user_data.get(query.from_user.id, {}):
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=context.user_data[query.from_user.id]["last_message_id"])
            del context.user_data[query.from_user.id]["last_message_id"]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
    if "sent_files" in context.user_data.get(query.from_user.id, {}):
        for _, msg_id in context.user_data[query.from_user.id]["sent_files"]:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
        del context.user_data[query.from_user.id]["sent_files"]
    try:
        await query.edit_message_text("–ó–∞–∫–∞–∑—ã –∑–∞–∫—Ä—ã—Ç—ã.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
def main():   
    keep_alive()
    TOKEN = "7771688126:AAFtHtiBQFs_Hb8HMr91QvYNKG5Gx1QRG4E"
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("update_stock", update_stock_admin))
    application.add_handler(CommandHandler("view_all_orders", view_all_orders))
    application.add_handler(CallbackQueryHandler(contact_admin, pattern="^contact_admin$"))   
    application.add_handler(CallbackQueryHandler(navigate_orders_page, pattern="^prev_orders_page$|^next_orders_page$"))
    application.add_handler(CallbackQueryHandler(close_orders, pattern="^close_orders$"))
    application.add_handler(CallbackQueryHandler(view_products, pattern="^view_products$"))
    application.add_handler(CallbackQueryHandler(add_to_cart, pattern=r"^add_to_cart_\d+$"))
    application.add_handler(CallbackQueryHandler(view_cart, pattern="^view_cart$"))
    application.add_handler(CallbackQueryHandler(remove_from_cart, pattern="^remove_from_cart$"))
    application.add_handler(CallbackQueryHandler(remove_item, pattern=r"^remove_item_\d+$"))
    application.add_handler(CallbackQueryHandler(clear_cart, pattern="^clear_cart$"))
    application.add_handler(CallbackQueryHandler(checkout, pattern="^checkout$"))
    application.add_handler(CallbackQueryHandler(handle_payment, pattern=r"^payment_\w+$"))
    application.add_handler(CallbackQueryHandler(check_order, pattern="^check_order$"))
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$"))
    application.add_handler(CallbackQueryHandler(show_category_or_products, pattern=r"^category_\d+$"))
    application.add_handler(CallbackQueryHandler(show_product_details, pattern=r"^show_product_\d+$"))
    application.add_handler(CallbackQueryHandler(back_to_category, pattern="^back_to_category$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_payment_proof)) 
    application.run_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")


if __name__ == "__main__":
    main()
