# -*- coding: utf-8 -*-

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('shop.db', timeout=10)  # –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
    cursor = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            price INTEGER NOT NULL,
            stock INTEGER NOT NULL,
            image_url TEXT,
            category_id INTEGER,
            FOREIGN KEY(category_id) REFERENCES categories(id)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT NOT NULL,
            items TEXT NOT NULL,
            address TEXT NOT NULL,
            total_price INTEGER NOT NULL,
            payment_method TEXT NOT NULL,
            payment_proof TEXT,
            payment_proof_type TEXT
        )
    ''')

    conn.commit()
    conn.close()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def update_stock_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(user_id) != "753866988":  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = context.args
    if len(args) != 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /update_stock <product_id> <new_stock>"
        )
        return

    product_id, new_stock = args
    try:
        product_id = int(product_id)
        new_stock = int(new_stock)
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ product_id –∏ new_stock —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏.")
        return

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º stock
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT name FROM products WHERE id = ?', (product_id,))
    product = cursor.fetchone()

    if not product:
        await update.message.reply_text(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        conn.close()
        return

    product_name = product[0]
    cursor.execute('UPDATE products SET stock = ? WHERE id = ?', (new_stock, product_id))
    conn.commit()
    conn.close()

    await update.message.reply_text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ '{product_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {new_stock}.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def view_all_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(user_id) != "753866988":  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT 
            id, user_id, username, items, address, total_price, payment_method, payment_proof, payment_proof_type
        FROM orders
    ''')
    orders = cursor.fetchall()
    conn.close()

    if not orders:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–∞—Ö
    orders_text = ""
    for order in orders:
        order_id, user_id, username, items, address, total_price, payment_method , payment_proof, payment_proof_type= order
        orders_text += (
            f"üì¶ –ó–∞–∫–∞–∑ #{order_id}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
            f"–¢–æ–≤–∞—Ä—ã: {items}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n"
            f"–°—É–º–º–∞: {total_price} —Ä—É–±.\n"
            f"–û–ø–ª–∞—Ç–∞: {payment_method.capitalize()}\n"
            f"-------------------------------\n"
        )
        if payment_proof:
            try:
                if payment_proof_type == 'photo':
                    await context.bot.send_photo(chat_id="753866988", photo=payment_proof)
                elif payment_proof_type == 'document':
                    await context.bot.send_document(chat_id="753866988", document=payment_proof)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
    await update.message.reply_text(f"üõí –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:\n\n{orders_text}")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_test_products():
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ categories
    cursor.execute('SELECT COUNT(*) FROM categories')
    categories_count = cursor.fetchone()[0]
    
    if categories_count == 0:
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª–∏ –æ—à–∏–±–∫–∏)
        cursor.execute('DELETE FROM categories')
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = [
            ("–°—Ç–∏–∫–µ—Ä—ã",),
            ("–ü–æ—Å—Ç–µ—Ä—ã –ê3",),
            ("–ü–æ—Å—Ç–µ—Ä—ã –ê4",)
        ]
        cursor.executemany('INSERT INTO categories (name) VALUES (?)', categories)
        
        print("–¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    else:
        print("–¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü–µ products
    cursor.execute('SELECT COUNT(*) FROM products')
    product_count = cursor.fetchone()[0]

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if product_count == 0:
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª–∏ –æ—à–∏–±–∫–∏)
        cursor.execute('DELETE FROM products')
                
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        products = [
        ("–û—Å–µ–Ω–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", 350, 10, "1.jpg", 1),
        ("–ö–æ—à–∫–∞ –∂–µ–ª–µ", 350, 5, "2.jpg", 1),
        ("–ú–∞–ª–µ–Ω–∏—è", 350, 5, "4.jpg", 2),
        ("–†–µ–∞–ª—å–Ω—ã–µ —É–ø—ã—Ä–∏", 350, 3, "3.jpg", 1)
    ]
        cursor.executemany('INSERT INTO products (name, price, stock, image_url, category_id) VALUES (?, ?, ?, ?, ?)', products)

        print("–¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    else:
        print("–¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    conn.commit()
    conn.close()    

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö   
def get_categories():
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, name FROM categories')
    categories = cursor.fetchall()
    conn.close()
    return {str(cat[0]): cat[1] for cat in categories}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_products():
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, name, price, stock, image_url, category_id FROM products')
    products = cursor.fetchall()
    conn.close()
    return {str(product[0]): {"name": product[1], "price": product[2], "stock": product[3], "image_url": product[4], "category_id": product[5]} for product in products}
    
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞
def update_stock(product_id, quantity):
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE products SET stock = stock - ? WHERE id = ?', (quantity, product_id))
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_order(user_id, username, items, address, total_price, payment_method, payment_proof, payment_proof_type):
    with sqlite3.connect('shop.db', timeout=10) as conn:
        conn = sqlite3.connect('shop.db')
        cursor = conn.cursor()

        # –ï—Å–ª–∏ username –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        username = username or f"user_{user_id}"

        cursor.execute(
            'INSERT INTO orders (user_id, username, items, address, total_price, payment_method, payment_proof, payment_proof_type) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
            (user_id, username, items, address, total_price, payment_method, payment_proof, payment_proof_type)
        )
        conn.commit()
        conn.close()


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
     # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data[user_id]["last_message_id"]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in context.user_data:
        context.user_data[user_id] = {"cart": {}, "reserved_stock": {}}
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å, –Ω–µ –∑–∞—Ç–∏—Ä–∞–µ–º –∏—Ö
        if "cart" not in context.user_data[user_id]:
            context.user_data[user_id]["cart"] = {}
        if "reserved_stock" not in context.user_data[user_id]:
            context.user_data[user_id]["reserved_stock"] = {}
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="view_products")],
        [InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")],
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑", callback_data="check_order")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username
    context.user_data[user_id] = {"username": update.message.from_user.username}

    message = await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!", reply_markup=reply_markup)
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
    context.user_data[user_id]["last_message_id"] = message.message_id

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤
import uuid
async def view_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–ª–ª–±—ç–∫
    user_id = query.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=context.user_data[user_id]["last_message_id"]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    if "product_messages" in context.user_data[user_id]:
        for message_id in context.user_data[user_id]["product_messages"]:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
        context.user_data[user_id]["product_messages"].clear()

   
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    categories = get_categories()

    if not categories:
        message = await query.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return
    else:
        product_messages = []
        
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏    
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"category_{cat_id}")]
        for cat_id, name in categories.items()
    ]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
    context.user_data[user_id]["last_message_id"] = message.message_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
    context.user_data[user_id]["last_message_id"] = message.message_id
    context.user_data[user_id]["product_messages"] = product_messages

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def show_products_by_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–ª–ª–±—ç–∫
    user_id = query.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=context.user_data[user_id]["last_message_id"]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    if "product_messages" in context.user_data[user_id]:
        for message_id in context.user_data[user_id]["product_messages"]:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
        context.user_data[user_id]["product_messages"] = []
        
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º "reserved_stock", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in context.user_data:
        context.user_data[user_id] = {"cart": {}, "reserved_stock": {}, "product_messages": []}
    elif "reserved_stock" not in context.user_data[user_id]:
        context.user_data[user_id]["reserved_stock"] = {}
    elif "product_messages" not in context.user_data[user_id]:
        context.user_data[user_id]["product_messages"] = []    

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    category_id = query.data.split("_")[1]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = get_products_by_category(category_id)

    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    if not products:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        message = await query.message.reply_text(
            text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.",
            reply_markup=keyboard
        )
        context.user_data[user_id]["last_message_id"] = message.message_id
        return


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
    product_messages = []
    for product_id, product in products.items():
        cart = context.user_data[user_id].get("cart", {})
        quantity_in_cart = cart.get(product_id, {}).get("quantity", 0)

        caption = (
            f"{product['name']}\n"
            f"–¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
            f"–í –Ω–∞–ª–∏—á–∏–∏: {product['stock']} —à—Ç."
        )
        if quantity_in_cart > 0:
            caption += f"\n–í –∫–æ—Ä–∑–∏–Ω–µ: {quantity_in_cart} —à—Ç."

        message = await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=product["image_url"],
            caption=caption,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}")]
            ])
        )
        product_messages.append(message.message_id)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="view_products")]
    ])
    message = await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –∏ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    context.user_data[user_id]["last_message_id"] = message.message_id
    context.user_data[user_id]["product_messages"] = product_messages


def get_products_by_category(category_id):
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, name, price, stock, image_url, category_id FROM products WHERE category_id = ?', (category_id,))
    products = cursor.fetchall()
    conn.close()
    return {
        str(product[0]): {
            "name": product[1],
            "price": product[2],
            "stock": product[3],
            "image_url": product[4],
            "category_id": product[5]
        }
        for product in products
    }

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–ª–ª–±—ç–∫
    user_id = query.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=context.user_data[user_id]["last_message_id"]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    if "product_messages" in context.user_data[user_id]:
        for message_id in context.user_data[user_id]["product_messages"]:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
        context.user_data[user_id]["product_messages"].clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="view_products")],
        [InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")],
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑", callback_data="check_order")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await query.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!", reply_markup=reply_markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π message_id
    context.user_data[user_id]["last_message_id"] = message.message_id

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):   
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–ª–ª–±—ç–∫

    user_id = query.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data[user_id]["last_message_id"]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")     

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    if "product_messages" in context.user_data[user_id]:
        for message_id in context.user_data[user_id]["product_messages"]:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
        context.user_data[user_id]["product_messages"].clear()            
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º "cart" –∏ "reserved_stock", –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in context.user_data:
        context.user_data[user_id] = {"cart": {}, "reserved_stock": {}}
    elif "cart" not in context.user_data[user_id]:
        context.user_data[user_id]["cart"] = {}
    elif "reserved_stock" not in context.user_data[user_id]:
        context.user_data[user_id]["reserved_stock"] = {}

    product_id = query.data.split("_")[3]
    products = get_products()

    if product_id not in products:
        await query.message.reply_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    product = products[product_id]      
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
    reserved_quantity = context.user_data[user_id]["reserved_stock"].get(product_id, 0)
    available_stock = product["stock"] - reserved_quantity

    if available_stock <= 0:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="view_products")],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        message = await query.message.reply_text(
            f"{product['name']} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞.",
            reply_markup=keyboard
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
        context.user_data[user_id]["last_message_id"] = message.message_id
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart = context.user_data[user_id]["cart"]
    if product_id in cart:
        cart[product_id]["quantity"] += 1
    else:
        cart[product_id] = {"name": product["name"], "price": product["price"], "quantity": 1}
    
    # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä
    context.user_data[user_id]["reserved_stock"][product_id] = context.user_data[user_id]["reserved_stock"].get(product_id, 0) + 1
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="view_products")],
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="view_cart")]
    ])
    message = await query.message.reply_text(
        text=(f"'{product['name']}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cart[product_id]['quantity']}"),
        reply_markup=keyboard
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
    context.user_data[user_id]["last_message_id"] = message.message_id
    

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
async def view_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–ª–ª–±—ç–∫

    user_id = query.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=context.user_data[user_id]["last_message_id"]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º "cart", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in context.user_data or "cart" not in context.user_data[user_id]:
        context.user_data[user_id] = {"cart": {}}

    cart = context.user_data[user_id]["cart"]

    if not cart:
        # –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        message = await query.message.reply_text(
            text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
            reply_markup=keyboard
        )
        context.user_data[user_id]["last_message_id"] = message.message_id
        return

    total_price = sum(item["price"] * item["quantity"] for item in cart.values())
    delivery_cost = 0 if total_price >= 1500 else 400
    final_price = total_price + delivery_cost

    cart_text = "\n".join([
        f"{item['name']} - {item['price']} —Ä—É–±. x {item['quantity']} = {item['price'] * item['quantity']} —Ä—É–±."
        for item in cart.values()
    ])

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="remove_from_cart")],
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="view_products")]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –í–°–ï —Ç–æ–≤–∞—Ä—ã", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ
    if len(cart) > 1:
        keyboard.insert(2, [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –í–°–ï —Ç–æ–≤–∞—Ä—ã", callback_data="clear_cart")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = await query.message.reply_text(
        text=f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{cart_text}\n\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.\n"
             f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_cost} —Ä—É–±. (–û—Ç 1500—Ä. –≤ —á–µ–∫–µ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n–ò—Ç–æ–≥–æ: {final_price} —Ä—É–±.",
        reply_markup=reply_markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π message_id
    context.user_data[user_id]["last_message_id"] = message.message_id

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
async def remove_from_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–ª–ª–±—ç–∫

    user_id = query.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=context.user_data[user_id]["last_message_id"]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    if user_id not in context.user_data or "cart" not in context.user_data[user_id]:
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return

    cart = context.user_data[user_id]["cart"]

    keyboard = [
        [InlineKeyboardButton(f"{item['name']} (x{item['quantity']})", callback_data=f"remove_item_{product_id}")]
        for product_id, item in cart.items()
    ]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="view_cart")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = await query.message.reply_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π message_id
    context.user_data[user_id]["last_message_id"] = message.message_id

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
async def remove_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–ª–ª–±—ç–∫

    user_id = query.from_user.id
    product_id = query.data.split("_")[2]
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=context.user_data[user_id]["last_message_id"]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    if user_id not in context.user_data or "cart" not in context.user_data[user_id]:
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        context.user_data[user_id]["last_message_id"] = message.message_id       
        return

    cart = context.user_data[user_id]["cart"]

    if product_id not in cart:
        message = await query.message.reply_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if cart[product_id]["quantity"] > 1:
        cart[product_id]["quantity"] -= 1
        new_quantity = cart[product_id]["quantity"]
        text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {cart[product_id]['name']} —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ {new_quantity}."
    else:
        removed_item = cart.pop(product_id)
        text = f"{removed_item['name']} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞ –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞          
    if not cart:
        # –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        message = await query.message.reply_text(
            text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞.",
            reply_markup=keyboard
        )
        context.user_data[user_id]["last_message_id"] = message.message_id
        return    

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    total_price = sum(item["price"] * item["quantity"] for item in cart.values())
    delivery_cost = 0 if total_price >= 1500 else 400
    final_price = total_price + delivery_cost

    cart_text = "\n".join([
        f"{item['name']} - {item['price']} —Ä—É–±. x {item['quantity']} = {item['price'] * item['quantity']} —Ä—É–±."
        for item in cart.values()
    ])

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="remove_from_cart")],
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="view_products")]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –í–°–ï —Ç–æ–≤–∞—Ä—ã", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ
    if len(cart) > 1:
        keyboard.insert(2, [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –í–°–ï —Ç–æ–≤–∞—Ä—ã", callback_data="clear_cart")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = await query.message.reply_text(
        text=f"{text}\n\n–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{cart_text}\n\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.\n"
             f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_cost} —Ä—É–±. (–û—Ç 1500—Ä. –≤ —á–µ–∫–µ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n–ò—Ç–æ–≥–æ: {final_price} —Ä—É–±.",
        reply_markup=reply_markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π message_id
    context.user_data[user_id]["last_message_id"] = message.message_id

# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –∫–æ—Ä–∑–∏–Ω—ã
async def clear_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–ª–ª–±—ç–∫

    user_id = query.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=context.user_data[user_id]["last_message_id"]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    if user_id not in context.user_data or "cart" not in context.user_data[user_id]:
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return

    context.user_data[user_id]["cart"] = {}

    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–µ
    keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
    message = await query.message.reply_text(
        text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞.",
        reply_markup=keyboard
        )
    context.user_data[user_id]["last_message_id"] = message.message_id

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–ª–ª–±—ç–∫

    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id
    user_id = query.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=context.user_data[user_id]["last_message_id"]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if user_id not in context.user_data or "cart" not in context.user_data[user_id]:
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return

    cart = context.user_data[user_id]["cart"]

    if not cart:
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return

    total_price = sum(item["price"] * item["quantity"] for item in cart.values())
    delivery_cost = 0 if total_price >= 1500 else 400
    final_price = total_price + delivery_cost

    cart_text = "\n".join([
        f"{item['name']} - {item['price']} —Ä—É–±. x {item['quantity']} = {item['price'] * item['quantity']} —Ä—É–±."
        for item in cart.values()
    ])

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    message = await query.message.reply_text(
        text=f"–í–∞—à –∑–∞–∫–∞–∑:\n{cart_text}\n\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.\n"
             f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_cost} —Ä—É–±.(–û—Ç 1500—Ä. –≤ —á–µ–∫–µ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n–ò—Ç–æ–≥–æ: {final_price} —Ä—É–±.\n\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –∏–Ω–¥–µ–∫—Å, –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π message_id
    context.user_data[user_id]["last_message_id"] = message.message_id

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
    context.user_data[user_id]["state"] = "awaiting_address"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
async def handle_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(
                chat_id=update.message.chat_id,
                message_id=context.user_data[user_id]["last_message_id"]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    if user_id not in context.user_data or context.user_data[user_id].get("state") != "awaiting_address":
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if user_id not in context.user_data or "cart" not in context.user_data[user_id]:
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return

    cart = context.user_data[user_id]["cart"]

    if not cart:
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return

    total_price = sum(item["price"] * item["quantity"] for item in cart.values())
    delivery_cost = 0 if total_price >= 1500 else 400
    final_price = total_price + delivery_cost

    cart_text = "\n".join([
        f"{item['name']} - {item['price']} —Ä—É–±. x {item['quantity']} = {item['price'] * item['quantity']} —Ä—É–±."
        for item in cart.values()
    ])
    
    address = update.message.text
    context.user_data[user_id]["address"] = address

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ username —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = update.message.from_user.username
    phone_number = update.message.contact.phone_number if update.message.contact else None

    # –ï—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º phone_number –∏–ª–∏ user_id
    if not username:
        username = phone_number or f"user_{user_id}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    context.user_data[user_id]["username"] = username
    address = update.message.text
    context.user_data[user_id]["address"] = address

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("–°–ë–ü (QR-–∫–æ–¥)", callback_data="payment_qr")],
        [InlineKeyboardButton("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", callback_data="payment_card")]
    ]))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
    context.user_data[user_id]["last_message_id"] = update.message.message_id

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
async def handle_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–ª–ª–±—ç–∫

    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id
    user_id = query.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=context.user_data[user_id]["last_message_id"]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if user_id not in context.user_data or "cart" not in context.user_data[user_id]:
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return

    cart = context.user_data[user_id]["cart"]

    if not cart:
        message = await query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        context.user_data[user_id]["last_message_id"] = message.message_id
        return

    total_price = sum(item["price"] * item["quantity"] for item in cart.values())
    delivery_cost = 0 if total_price >= 1500 else 400
    final_price = total_price + delivery_cost

    cart_text = "\n".join([
        f"{item['name']} - {item['price']} —Ä—É–±. x {item['quantity']} = {item['price'] * item['quantity']} —Ä—É–±."
        for item in cart.values()
    ])
    
    payment_method = query.data.split("_")[1]

    if payment_method == "qr":
        with open("QR-Code.jpg", "rb") as photo_file:
            await query.message.reply_photo(
                photo=photo_file,
                caption=f"–í–∞—à –∑–∞–∫–∞–∑:\n{cart_text}\n\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.\n"
             f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_cost} —Ä—É–±.(–û—Ç 1500—Ä. –≤ —á–µ–∫–µ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n–ò—Ç–æ–≥–æ: {final_price} —Ä—É–±.\n\n"
             "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã."
            )
    else:
        await query.message.reply_text(
        text=f"–í–∞—à –∑–∞–∫–∞–∑:\n{cart_text}\n\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.\n"
             f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_cost} —Ä—É–±.(–û—Ç 1500—Ä. –≤ —á–µ–∫–µ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n–ò—Ç–æ–≥–æ: {final_price} —Ä—É–±.\n\n"
             "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: 2202 2016 3095 5124")

    context.user_data[user_id]["payment_method"] = payment_method
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ PDF-—Ñ–∞–π–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")
    context.user_data[user_id]["state"] = "awaiting_payment_proof"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
    context.user_data[user_id]["last_message_id"] = query.message

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
async def handle_payment_proof(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in context.user_data or context.user_data[user_id].get("state") != "awaiting_payment_proof":
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.message.photo:
        # –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        payment_proof = update.message.photo[-1].file_id        
        payment_proof_type = 'photo'
    elif update.message.document and update.message.document.mime_type.startswith('image'):
        # –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, .jpg, .png –∏ —Ç.–¥.)
        payment_proof = update.message.document.file_id
        payment_proof_type = 'document'
    elif update.message.document and update.message.document.mime_type == "application/pdf":
        # –ï—Å–ª–∏ —ç—Ç–æ PDF-–¥–æ–∫—É–º–µ–Ω—Ç
        payment_proof = update.message.document.file_id
        payment_proof_type = 'document'
    
    else:
        # –ï—Å–ª–∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã."
        )
        return
    
    cart = context.user_data[user_id]["cart"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    product_ids = list(cart.keys())
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    placeholders = ", ".join("?" * len(product_ids))
    
    cursor.execute(f'''
        SELECT p.id, p.name, c.name 
        FROM products p
        JOIN categories c ON p.category_id = c.id
        WHERE p.id IN ({placeholders})
    ''', product_ids)
    
    product_info = cursor.fetchall()
    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    formatted_items = []
    for pid, product_name, category_name in product_info:
        item = cart.get(str(pid))
        if item:
            quantity = item["quantity"]
            formatted_items.append(f"{product_name} x{quantity} ({category_name})")

    items = ", ".join(formatted_items)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    for product_id, item in cart.items():
        update_stock(product_id, item["quantity"])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
    context.user_data[user_id]["payment_proof"] = payment_proof
    context.user_data[user_id]["payment_proof_type"] = payment_proof_type

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    cart = context.user_data[user_id]["cart"]
    address = context.user_data[user_id]["address"]
    total_price = sum(item["price"] * item["quantity"] for item in cart.values())
    delivery_cost = 0 if total_price >= 1500 else 400
    final_price = total_price + delivery_cost
    payment_method = context.user_data[user_id]["payment_method"]    

    save_order(
        user_id=user_id,
        username=context.user_data[user_id]["username"],  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ
        items=items,
        address=address,
        total_price=final_price,
        payment_method=payment_method,
        payment_proof=payment_proof,
        payment_proof_type=payment_proof_type
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_message = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{context.user_data[user_id]['username']}:\n" \
                    f"–¢–æ–≤–∞—Ä—ã: {items}\n" \
                    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n" \
                    f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {final_price} —Ä—É–±.\n" \
                    f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method.capitalize()}"
    await context.bot.send_message(chat_id="753866988", text=admin_message)

    if update.message.photo:
        await context.bot.send_photo(chat_id="753866988", photo=payment_proof)
    elif update.message.document:
        await context.bot.send_document(chat_id="753866988", document=payment_proof)

    # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    del context.user_data[user_id]
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞
async def check_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if "last_message_id" in context.user_data.get(user_id, {}):
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data[user_id]["last_message_id"]
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT items, address, total_price, payment_method FROM orders WHERE user_id = ? ORDER BY id DESC', (user_id,))
    orders = cursor.fetchall()
    conn.close()    

    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç, ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    if not orders:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        message = await query.message.reply_text(
            text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=keyboard
        )
        context.user_data[user_id]["last_message_id"] = message.message_id
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    orders_text = []
    for idx, order in enumerate(orders, start=1):
        items, address, total_price, payment_method = order
        order_text = (
            f"–ó–∞–∫–∞–∑ #{idx}:\n"
            f"–¢–æ–≤–∞—Ä—ã: {items}\n"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n"
            f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_price} —Ä—É–±.\n"
            f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method.capitalize()}\n"
            "-----------------------------"
        )
        orders_text.append(order_text)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
    full_orders_text = "\n".join(orders_text)


    keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–∫–∞–∑–æ–≤
    message = await query.message.reply_text(
        text=f"–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:\n{full_orders_text}",
            reply_markup=keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
    context.user_data[user_id]["last_message_id"] = message.message_id
    
def document_is_image(update: Update, context):
    return bool(
        update.message.document and 
        update.message.document.mime_type and 
        update.message.document.mime_type.startswith('image/')
    ) 
    
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    add_test_products() # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã, –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞

    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç BotFather
    TOKEN = "7771688126:AAFtHtiBQFs_Hb8HMr91QvYNKG5Gx1QRG4E"
    ADMIN_CHAT_ID = "753866988"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("update_stock", update_stock_admin)) # –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
    application.add_handler(CommandHandler("view_all_orders", view_all_orders)) # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    application.add_handler(CallbackQueryHandler(show_products_by_category, pattern=r"^category_\d+$")) # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    application.add_handler(CallbackQueryHandler(view_products, pattern="^view_products$")) # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    application.add_handler(CallbackQueryHandler(add_to_cart, pattern=r"^add_to_cart_\d+$")) 
    application.add_handler(CallbackQueryHandler(view_cart, pattern="^view_cart$"))
    application.add_handler(CallbackQueryHandler(remove_from_cart, pattern="^remove_from_cart$"))
    application.add_handler(CallbackQueryHandler(remove_item, pattern=r"^remove_item_\d+$"))
    application.add_handler(CallbackQueryHandler(clear_cart, pattern="^clear_cart$"))
    application.add_handler(CallbackQueryHandler(checkout, pattern="^checkout$"))
    application.add_handler(CallbackQueryHandler(handle_payment, pattern=r"^payment_\w+$"))
    application.add_handler(CallbackQueryHandler(check_order, pattern="^check_order$"))
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_address))
    application.add_handler(MessageHandler(
    filters.PHOTO | filters.Document.ALL,
    handle_payment_proof
))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

if __name__ == "__main__":
    main()